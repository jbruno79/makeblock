# generated by mBlock5 for CyberPi
# codes make you happy

import event, time, cyberpi, network, socket, json, ujson
# initialize variables
PORT = 37020
BCAST = "192.168.5.255"   # o el broadcast de tu subred, p.ej. "192.168.1.255"

MY_ID = "cyberpi"
MY_IP = ""

sock_rx = None
sock_tx = None

msg_tx = {
    "type": "",
    "to": "",
    "from": "",
    "message": "",
    "value": ""
}

msg_rx = {
    "type": "",
    "to": "",
    "from": "",
    "message": "",
    "value": ""
}
wlan = network.WLAN(network.STA_IF)
def set_payload(p_type, p_to, p_from, p_msg, p_val):
    payload = {
        "type": "",
        "to": "",
        "from": "",
        "message": "",
        "value": ""
    }
    payload["type"]=p_type
    payload["to"]=p_to
    payload["from"]=p_from
    payload["message"]=p_msg
    payload["value"]=p_val

    payload_json = json.dumps(payload)
    payload_str = payload_json.encode("utf-8")
    return payload_str

@event.start
def on_start():
    # 1) Conexión WiFi
    wlan = network.WLAN(network.STA_IF)
    wlan.active(True)

    if not wlan.isconnected():
        wlan.connect("SSID", "PASS")
        t0 = time.ticks_ms()
        while not wlan.isconnected():
            if time.ticks_diff(time.ticks_ms(), t0) > 15000:
                print("Timeout WiFi")
                continue
            else:
                time.sleep_ms(200)
                wlan.connect("SSID", "PASS")

    if wlan.isconnected():
      cyberpi.led.on(84, 208, 1, "all")
      global MY_ID, BCAST, PORT, sock_tx, sock_rx

      # TX sock
      sock_tx = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)

      # RX sock
      sock_rx = socket.socket(socket.AF_INET, socket.SOCK_DGRAM, socket.IPPROTO_UDP)
      sock_rx.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
      sock_rx.bind(("", PORT))
      sock_rx.settimeout(0.1)

      # Set nanme
      MY_ID = "cyberpi"

      # Set payload
      payload = set_payload("iam","*", MY_ID, "online", "1")

      # Send how I am
      try:
          sock_tx.sendto(payload, (BCAST, PORT))
      except Exception as e:
          # cyberpi.console.print("ERROR: ")
          # cyberpi.console.println(e)
          error = e

    else:
      cyberpi.led.on(208, 2, 27, "all")
      cyberpi.console.println("WiFI error")

@event.is_press('a')
def is_btn_press():
    if wlan.isconnected():
      global msg_tx, sock_tx, MY_ID, BCAST, PORT

      # Set payload
      payload = set_payload("cmd","*", MY_ID, "hello world", "")

      # Send message
      try:
          sock_tx.sendto(payload, (BCAST, PORT))
      except Exception as e:
          # cyberpi.console.print("ERROR: ")
          # cyberpi.console.println(e)
          error = e

      payload_dict = json.loads(payload)
      msg_tx = payload_dict
      global msg_tx, sock_tx, MY_ID, BCAST, PORT

      # Set payload
      payload = set_payload("cmd","*", MY_ID, "move", "10")

      # Send message
      try:
          sock_tx.sendto(payload, (BCAST, PORT))
      except Exception as e:
          # cyberpi.console.print("ERROR: ")
          # cyberpi.console.println(e)
          error = e

      payload_dict = json.loads(payload)
      msg_tx = payload_dict

@event.is_press('b')
def is_btn_press1():
    if wlan.isconnected():
      global sock_rx, msg_rx  # <-- IMPORTANTe
      wait_msg = True
      error=""

      while wait_msg==True:
          try:
              data, addr = sock_rx.recvfrom(4096)

              msg = json.loads(data.decode("utf-8"))

              #cyberpi.console.println(msg)
              # ¿Es para mí o para todos?
              if msg.get("to") in (MY_ID, "*"):
                  wait_msg = False
                  # print(f"[{addr}] {msg}")
                  #cyberpi.console.clear()
                  #cyberpi.console.print("ARDR: ")
                  #cyberpi.console.println(addr)
                  #cyberpi.console.print("MSG: ")
                  #cyberpi.console.println(msg.get("message"))

                  msg_rx = msg
          except Exception as e:
              #cyberpi.console.print("ERROR: ")
              #cyberpi.console.println(e)
              #print("ERROR: ", e)
              error=e
      cyberpi.console.clear()
      cyberpi.console.println(msg_rx.get( "message"))
      cyberpi.led.on(12, 1, 208, "all")
      global sock_rx, msg_rx  # <-- IMPORTANTe
      wait_msg = True
      error=""

      while wait_msg==True:
          try:
              data, addr = sock_rx.recvfrom(4096)

              msg = json.loads(data.decode("utf-8"))

              #cyberpi.console.println(msg)
              # ¿Es para mí o para todos?
              if msg.get("to") in (MY_ID, "*"):
                  if msg.get("message") == "move":
                      wait_msg = False
                      # print(f"[] ")
                      #cyberpi.console.clear()
                      #cyberpi.console.print("ARDR: ")
                      #cyberpi.console.println(addr)
                      #cyberpi.console.print("MSG: ")
                      #cyberpi.console.println(msg.get("message"))

                      msg_rx = msg
          except Exception as e:
              #cyberpi.console.print("ERROR: ")
              #cyberpi.console.println(e)
              #print("ERROR: ", e)
              error=e
      cyberpi.console.println(msg_rx.get( "value"))
      cyberpi.led.on(249, 240, 2, "all")


